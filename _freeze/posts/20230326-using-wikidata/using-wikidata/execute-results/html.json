{
  "hash": "185cb513e6f7a8f8889921b3f6f21ca5",
  "result": {
    "markdown": "---\ntitle: \"Using Wiki Data to Extract Data\"\ndescription: \"This post shows how to access the wikipedia knowledge graph\"\nauthor: \"Luke Heley\"\ndate: \"26 March 2023\"\ncategories:\n  - wikipedia\n  - scrape\neditor_options: \n  chunk_output_type: console\n---\n\n\n# Objective\n\nExtract the knowledge graph for a Chinese strategic submarine.\n\n# Data\n\nWe use the wikidata API to extract the knowledge graph from wiki.\n\nThe approach is to search wikidata for the item of interest and select the best match from the list of search results that return.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# function to search wiki data and return a tibble of search results\nsearch_wikidata <- function(search){\n  base <- \"https://www.wikidata.org\" \n  path <- \"/w/api.php\"\n  query <- list(\n    action=\"query\",\n    list=\"search\",\n    format = \"json\",\n    srsearch = search\n  )\n  \n  httr::GET(base, path = path, query = query) |>\n    httr::content() |>\n    purrr::pluck(\"query\", \"search\") |>\n    purrr::map_df(~{\n      ul <- unlist(.x)\n      name <- names(ul)\n      value <- as.character(ul)\n      dplyr::tibble(name, value) |>\n        tidyr::pivot_wider()\n      })\n}\n\n(search_results <- search_wikidata(\"Type-094 submarine\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 6\n  ns    title    pageid  wordcount snippet                               times…¹\n  <chr> <chr>    <chr>   <chr>     <chr>                                 <chr>  \n1 0     Q1203377 1146175 0         nuclear-powered ballistic missile su… 2023-0…\n2 0     Q7008427 6886594 0         Wikimedia category                    2022-1…\n# … with abbreviated variable name ¹​timestamp\n```\n:::\n\n```{.r .cell-code}\n# Extract the item title for the item of interest\nroot_item_title <- search_results$title[1]\n```\n:::\n\n\nWe then extract wikidata associated with the item.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# extract the entity data for a chosen item.\nget_entity_data <- function(item = \"Q1203377\"){\n  base <- \"https://www.wikidata.org/\"\n  path <- glue::glue(\"wiki/Special:EntityData/{item}.json\")\n  query <- list(flavor = \"simple\")  \n  req <- httr::GET(base, path = path, query = query)\n  \n  httr::content(req) |>\n    purrr::pluck(\"entities\", item, \"claims\") |>\n    purrr::map_df(~{\n      value <- unlist(.x)\n      name <- names(value)\n      dplyr::tibble(name, value) |>\n        tidyr::pivot_wider() |>\n        tidyr::unnest()\n      })\n}\n\nentity_data <- get_entity_data(root_item_title)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `cols` is now required when using unnest().\nPlease use `cols = c()`\n`cols` is now required when using unnest().\nPlease use `cols = c()`\n`cols` is now required when using unnest().\nPlease use `cols = c()`\n`cols` is now required when using unnest().\nPlease use `cols = c()`\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Values from `value` are not uniquely identified; output will contain list-cols.\n* Use `values_fn = list` to suppress this warning.\n* Use `values_fn = {summary_fun}` to summarise duplicates.\n* Use the following dplyr code to identify duplicates.\n  {data} %>%\n    dplyr::group_by(name) %>%\n    dplyr::summarise(n = dplyr::n(), .groups = \"drop\") %>%\n    dplyr::filter(n > 1L)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `cols` is now required when using unnest().\nPlease use `cols = c(mainsnak.snaktype, mainsnak.property, mainsnak.hash, `mainsnak.datavalue.value.entity-type`, \n    `mainsnak.datavalue.value.numeric-id`, mainsnak.datavalue.value.id, \n    mainsnak.datavalue.type, mainsnak.datatype, type, id, rank)`\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `cols` is now required when using unnest().\nPlease use `cols = c()`\n`cols` is now required when using unnest().\nPlease use `cols = c()`\n`cols` is now required when using unnest().\nPlease use `cols = c()`\n`cols` is now required when using unnest().\nPlease use `cols = c()`\n`cols` is now required when using unnest().\nPlease use `cols = c()`\n`cols` is now required when using unnest().\nPlease use `cols = c()`\n`cols` is now required when using unnest().\nPlease use `cols = c()`\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Values from `value` are not uniquely identified; output will contain list-cols.\n* Use `values_fn = list` to suppress this warning.\n* Use `values_fn = {summary_fun}` to summarise duplicates.\n* Use the following dplyr code to identify duplicates.\n  {data} %>%\n    dplyr::group_by(name) %>%\n    dplyr::summarise(n = dplyr::n(), .groups = \"drop\") %>%\n    dplyr::filter(n > 1L)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `cols` is now required when using unnest().\nPlease use `cols = c(mainsnak.snaktype, mainsnak.property, mainsnak.hash, `mainsnak.datavalue.value.entity-type`, \n    `mainsnak.datavalue.value.numeric-id`, mainsnak.datavalue.value.id, \n    mainsnak.datavalue.type, mainsnak.datatype, type, id, rank, \n    references.hash, references.snaks.P143.snaktype, references.snaks.P143.property, \n    references.snaks.P143.hash, `references.snaks.P143.datavalue.value.entity-type`, \n    `references.snaks.P143.datavalue.value.numeric-id`, references.snaks.P143.datavalue.value.id, \n    references.snaks.P143.datavalue.type, references.snaks.P143.datatype, \n    `references.snaks-order`)`\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `cols` is now required when using unnest().\nPlease use `cols = c()`\n`cols` is now required when using unnest().\nPlease use `cols = c()`\n`cols` is now required when using unnest().\nPlease use `cols = c()`\n```\n:::\n:::\n\n\nAnd the associated properties\n\n\n::: {.cell}\n\n```{.r .cell-code}\nproperties <- entity_data |> \n  dplyr::pull(\"mainsnak.property\") |>\n  unique()\n\nget_entity_id <- function(id = \"P373\"){\n  if(length(id)>1) id <- paste(id, collapse = \"|\")\n  base <- \"https://www.wikidata.org/\"\n  path <- \"w/api.php\"\n  query <- list(\n    action=\"wbgetentities\",\n    ids=id,\n    languages=\"en\",\n    props=\"labels\",\n    format=\"json\"\n    )\n  \n  req <- httr::GET(base, path = path, query = query) \n  \n  if(req$status != 200) \n    return(stop(glue::glue(\"Error returned status: {req$status}\")))\n  \n  httr::content(req) |>\n    purrr::pluck(\"entities\") |>\n    purrr::map_df(~{\n      value <- unlist(.x)\n      name <- names(value)\n      dplyr::tibble(name, value) |> tidyr::pivot_wider()\n    })\n}\n\n(prop_label <- get_entity_id(properties))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 16 × 5\n   type     datatype        id    labels.en.language labels.en.value      \n   <chr>    <chr>           <chr> <chr>              <chr>                \n 1 property string          P373  en                 Commons category     \n 2 property wikibase-item   P516  en                 powered by           \n 3 property string          P561  en                 NATO reporting name  \n 4 property wikibase-item   P31   en                 instance of          \n 5 property wikibase-item   P279  en                 subclass of          \n 6 property wikibase-item   P910  en                 topic's main category\n 7 property external-id     P646  en                 Freebase ID          \n 8 property time            P729  en                 service entry        \n 9 property wikibase-item   P156  en                 followed by          \n10 property wikibase-item   P155  en                 follows              \n11 property commonsMedia    P18   en                 image                \n12 property wikibase-item   P176  en                 manufacturer         \n13 property wikibase-item   P137  en                 operator             \n14 property monolingualtext P1813 en                 short name           \n15 property wikibase-item   P520  en                 armament             \n16 property wikibase-item   P495  en                 country of origin    \n```\n:::\n:::\n\n\nGet the item data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nentity_data2 <- entity_data |>\n  dplyr::select(\n    mainsnak.property,\n    mainsnak.datavalue.type,\n    mainsnak.datavalue.value.id,\n    mainsnak.datavalue.value,\n    mainsnak.datavalue.value.text,\n    mainsnak.datavalue.value.time\n  ) |>\n  dplyr::mutate(\n    value = dplyr::case_when(\n      !is.na(mainsnak.datavalue.value.id) ~ mainsnak.datavalue.value.id,\n      !is.na(mainsnak.datavalue.value) ~ mainsnak.datavalue.value,\n      !is.na(mainsnak.datavalue.value.time) ~ mainsnak.datavalue.value.time,\n      !is.na(mainsnak.datavalue.value.text) ~ mainsnak.datavalue.value.text\n    )\n  ) |>\n  dplyr::select(property = 1, type = 2, value) |>\n  dplyr::distinct()\n\nentity_data3 <- entity_data2 |>\n  dplyr::left_join(prop_label |>\n  dplyr::select(\n    property = id, \n    property_label = labels.en.value\n  ))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining, by = \"property\"\n```\n:::\n\n```{.r .cell-code}\nitems <- entity_data3 |>\n  dplyr::filter(type == \"wikibase-entityid\") |>\n  dplyr::pull(value) |> \n  unique()\n\nitem_labels <- get_entity_id(items)\n\n(item_property <- entity_data3 |>\n  dplyr::left_join(\n    item_labels |>\n      dplyr::select(value = id, item_label = labels.en.value)\n  ) |>\n  dplyr::mutate(item_label = dplyr::case_when(is.na(item_label)~value, \n                                              TRUE ~ item_label)) |>\n  dplyr::select(property_label, item_label))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining, by = \"value\"\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 17 × 2\n   property_label        item_label                                          \n   <chr>                 <chr>                                               \n 1 Commons category      Type 09IV submarines                                \n 2 powered by            nuclear marine propulsion                           \n 3 NATO reporting name   Jin                                                 \n 4 instance of           submarine class                                     \n 5 subclass of           ballistic missile submarine                         \n 6 subclass of           nuclear submarine                                   \n 7 topic's main category Category:Type 094 submarines                        \n 8 Freebase ID           /m/09wz47                                           \n 9 service entry         +2010-01-01T00:00:00Z                               \n10 followed by           Type 096 submarine                                  \n11 follows               Type 092 Daqingyu                                   \n12 image                 Jin (Type 094) Class Ballistic Missile Submarine.JPG\n13 manufacturer          Bohai Shipyard                                      \n14 operator              People's Liberation Army Navy                       \n15 short name            Type 094                                            \n16 armament              JL-2                                                \n17 country of origin     People's Republic of China                          \n```\n:::\n:::\n\n\nGet wiki urls\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_wikisites <- function(item = \"Q1203377\"){\n  base <- \"https://www.wikidata.org/\"\n  path <- glue::glue(\"wiki/Special:EntityData/{item}.json\")\n  query <- list(flavor = \"simple\")  \n  req <- httr::GET(base, path = path, query = query)\n  \n  cont <- httr::content(req) \n  cont |>\n    purrr::pluck(\"entities\", item, \"sitelinks\") |>\n    purrr::map_df(~{\n      value <- unlist(.x)\n      name <- names(value)\n      dplyr::tibble(name, value) |>\n        tidyr::pivot_wider()\n      })\n}\n\n(wikiurl <- get_wikisites(root_item_title) |>\n  dplyr::filter(site == \"enwiki\") |>\n  dplyr::pull(url))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                                   \n\"https://en.wikipedia.org/wiki/Type_094_submarine\" \n```\n:::\n:::\n\n\nScrape the infobox from the wiki url\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscrape_infobox <- function(\n    url =\"https://en.wikipedia.org/wiki/Type_094_submarine\"\n){\n  req <- httr::GET(url)\n  req |> \n    httr::content() |> \n    xml2::xml_find_all(\"//table[@class='infobox']\") |>\n    rvest::html_table() \n}\n\nscrape_infobox(\"https://en.wikipedia.org/wiki/Type_094_submarine\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n# A tibble: 22 × 2\n   X1                      X2                               \n   <chr>                   <chr>                            \n 1 Profile of the Type 094 Profile of the Type 094          \n 2 Type 094 submarine      Type 094 submarine               \n 3 Class overview          Class overview                   \n 4 Name                    Type 094 (Jin class)             \n 5 Builders                Bohai Shipyard, Huludao, China[2]\n 6 Operators               People's Liberation Army Navy    \n 7 Preceded by             Type 092 (Xia class)             \n 8 Succeeded by            Type 096                         \n 9 Cost                    $750 million per unit[1]         \n10 In commission           2007–present[2]                  \n# … with 12 more rows\n```\n:::\n:::\n\n\nScrape wikitables\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscrape_wikitables <- function(\n    url =\"https://en.wikipedia.org/wiki/Type_094_submarine\"\n){\n  req <- httr::GET(url)\n  req |> \n    httr::content() |> \n    xml2::xml_find_all(\"//table[@class='wikitable']\") |>\n    rvest::html_table()\n}\n\nscrape_wikitables(\"https://en.wikipedia.org/wiki/Type_094_submarine\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n# A tibble: 8 × 7\n  Name                `Hull no.`  Builder         Laid …¹ Launc…² Commi…³ Status\n  <chr>               <chr>       <chr>           <chr>   <chr>   <chr>   <chr> \n1 \"Type 094\"          \"Type 094\"  \"Type 094\"      \"Type … \"Type … Type 0… Type …\n2 \"\"                  \"411[2]\"    \"Bohai Shipyar… \"2001[… \"28 Ju… March … Active\n3 \"Changzheng 10[20]\" \"412[2]\"    \"Bohai Shipyar… \"2003[… \"2006[… 2010[2] Active\n4 \"Changzheng 11[20]\" \"413[2]\"    \"Bohai Shipyar… \"2004[… \"Decem… 2012[2] Active\n5 \"Changzheng 18[21]\" \"421[22]\"   \"\"              \"\"      \"\"      23 Apr… Active\n6 \"Type 094A\"         \"Type 094A\" \"Type 094A\"     \"Type … \"Type … Type 0… Type …\n7 \"\"                  \"\"          \"\"              \"\"      \"\"      2020[5] Active\n8 \"\"                  \"\"          \"\"              \"\"      \"\"      2020[5] Active\n# … with abbreviated variable names ¹​`Laid down`, ²​Launched, ³​Commissioned\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}