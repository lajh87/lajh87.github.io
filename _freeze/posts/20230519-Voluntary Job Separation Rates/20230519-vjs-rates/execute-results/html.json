{
  "hash": "9c3b3b88b11174e20a5afa9c16755b44",
  "result": {
    "markdown": "---\ntitle: \"Calculate Voluntary Job Separation Rates\"\ndescription: \"Calculate voluntary job separation rates from the two quarter labour force survey\"\nauthor: \"Luke Heley\"\ndate: \"19 May 2023\"\nfreeze: true\nexecute:\n  eval: true\nformat:\n  html:\n    toc: true\n    code-fold: true\ncategories:\n - NLP\neditor_options:\n  chunk_output_type: console\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\n# This script calculates voluntary and involuntary job separations from the \n# labour market. \n\n\n#+ Setup ----\n\n# Connect to Database\ncon <- DBI::dbConnect(\n  odbc::odbc(), driver = \"PostgreSQL ODBC Driver(Unicode)\", \n  database = \"lfs\", uid = \"lheley\", host = \"localhost\", pwd = \"lheley\", \n  port = 5432, maxvarcharsize = 0\n)\n\n# Extract Meta Data\nstudy_meta <- con |> \n    dplyr::tbl(\"2qlfs_index\") |>\n    dplyr::select(1:4) |>\n    dplyr::collect() |>\n    dplyr::left_join(\n      con |>\n        dplyr::tbl(\"study_filename_lu\") |>\n        dplyr::collect() |>\n        dplyr::rename(SN = study) |>\n        dplyr::mutate(SN = as.numeric(SN)),\n      by = \"SN\"\n    )\n\n\n#+ Define Variables ----\n# These variables were defined through comparison of the previous\n# ONS publications. \n\n# Where the question or possible responses to a question have changed\n# the variable is updated. \n\nwnleft <- c(\"WNEFT112\",\"WNLEFT2\")\nrelft <- c(\"REDYL112\",\"REDYL132\",\"REDYLFT2\")\nsector <- \"PUBLICR1\"\nemployment <- \"ILODEFR1\"\nage <- \"AGE1\"\nid <- c(\"PERSID\")\nlgwt <- c(\"LGWT\",\"LGWT18\", \"LGWT20\") # This responds to different population weights.\nindustry <- \"INDD07M1\"\nvars <- c(id, lgwt, wnleft, relft, sector, employment, age, industry)\n\ntbls <- DBI::dbListTables(con)\ntbls <- tbls[grepl(\"sn_\", tbls)]\n\nvariables <- tbls |>\n  purrr::map_df(function(tbl){\n    variables <- con |>\n      dplyr::tbl(tbl) |>\n      dplyr::select(tidyselect::any_of(vars)) |>\n      head() |>\n      dplyr::collect() |>\n      names()\n    \n    tibble::tibble(study = substr(tbl, 4, 9), variables)\n  })\n\n#+ Select tables the contain the variables we need -----\ntbls <- paste0(\"sn_\", variables |> \n                 dplyr::filter(variables %in% vars) |>\n                 dplyr::mutate(variables2 = dplyr::case_when(\n                   variables %in% relft ~ \"REDYLFT\",\n                   variables %in% wnleft ~ \"WNLEFT\",\n                   variables %in% lgwt ~ \"LGWT\",\n                   TRUE ~ variables\n                 )) |>\n                 dplyr::select(-variables) |>\n                 dplyr::mutate(value = 1) |>\n                 tidyr::pivot_wider(names_from = variables2, values_from = value)  |>\n                 na.omit() |>\n                 dplyr::select(study) |> dplyr::pull())\n\n\n#+ Calculate Statistics ------\n# Loop through the table. \n# Calculate the number of people that reason for leaving was voluntary separation\n# Calculate the overall people\n# This can be extended to include involuntary job separations\n\n\n# This code chunk loops through the selected tables\n# It selects variables which match our specified variables in 'vars'\n# It then renames variables with inconsistent names\n# Then filters between 16 and 65\n# It recode reason left to determine voluntary job separations\n# It calculates whether individual left employmnet in last three months\n# It then groups by sector and calculate the weighted and unweighted number of \n#  voluntary job separates by total sector size\nvjs <- tbls |>\n  purrr::map_df(function(tbl){\n    sql_tbl <- con |> dplyr::tbl(tbl) \n    sql_tbl |>\n      dplyr::select(tidyselect::any_of(vars)) |>\n      dplyr::rename(REDYLFT = tidyselect::any_of(relft)) |>\n      dplyr::rename(WNLEFT = tidyselect::any_of(wnleft)) |>\n      dplyr::rename(LGWT = tidyselect::any_of(lgwt))|>\n      dplyr::filter(AGE1 >= 16 & AGE1 < 65) |>\n      dplyr::collect() |>\n      dplyr::mutate(VJS = dplyr::case_when(\n        \"REDYLFT2\" %in% dplyr::tbl_vars(sql_tbl) ~  REDYLFT %in% 4:9,\n        \"REDYL112\" %in% dplyr::tbl_vars(sql_tbl) ~  REDYLFT %in% 4:10,\n        \"REDYL132\" %in% dplyr::tbl_vars(sql_tbl) ~  REDYLFT %in% c(3, 5:11)\n      )) |>\n      dplyr::mutate(LFT3M = WNLEFT == 1 & ILODEFR1 == 1) |> \n      dplyr::mutate(VJS_3M =  VJS & LFT3M) |>\n      dplyr::mutate(EMP = ILODEFR1 == 1) |>\n      dplyr::mutate(PUBLIC = PUBLICR1 == 2) |>\n      dplyr::mutate(PRIVATE = PUBLICR1 == 1) |>\n      dplyr::mutate(SECTOR = ifelse(PUBLIC, \"Public\", ifelse(PRIVATE, \"Private\", NA))) |>\n      dplyr::group_by(SECTOR) |>\n      dplyr::summarise(vjs_3m_w = crossprod(LGWT, VJS_3M)[1],\n                       vjs_3m = sum(VJS_3M),\n                       n_w = crossprod(EMP, LGWT)[1],\n                       n = sum(EMP), tbl = tbl)\n  })\n\nvjs_total <- study_meta |> \n  dplyr::select(tbl = SN, sitdate = End) |>\n  dplyr::mutate(tbl = paste(\"sn\", tbl, sep = \"_\")) |>\n  dplyr::collect() |>\n  dplyr::left_join(vjs, by = \"tbl\")  |>\n  dplyr::group_by(sitdate) |>\n  dplyr::summarise(vjs_3m_w = sum(vjs_3m_w),\n                   n_w = sum(n_w)) |>\n  dplyr::mutate(vjs_rate = vjs_3m_w / n_w) \n\nvjs_sector <- study_meta |> \n  dplyr::select(tbl = SN, sitdate = End) |>\n  dplyr::mutate(tbl = paste(\"sn\", tbl, sep = \"_\")) |>\n  dplyr::collect() |>\n  dplyr::left_join(vjs, by = \"tbl\")  |>\n  dplyr::filter(!is.na(SECTOR)) |>\n  dplyr::group_by(sitdate, sector = SECTOR) |>\n  dplyr::summarise(vjs_3m_w = sum(vjs_3m_w),\n                   n_w = sum(n_w)) |>\n  dplyr::mutate(vjs_rate = vjs_3m_w / n_w) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'sitdate'. You can override using the\n`.groups` argument.\n```\n:::\n\n```{.r .cell-code}\nvjs_total$vjs_rate[vjs_total$vjs_rate == 0] <- NA\nvjs_sector$vjs_rate[vjs_sector$vjs_rate == 0] <- NA\n\n\nggplot(vjs_total) + \n  geom_line(aes(sitdate, vjs_rate))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 66 rows containing missing values (`geom_line()`).\n```\n:::\n\n::: {.cell-output-display}\n![](20230519-vjs-rates_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(vjs_sector) +\n  geom_line(aes(sitdate, vjs_rate)) +\n  facet_wrap(~sector)\n```\n\n::: {.cell-output-display}\n![](20230519-vjs-rates_files/figure-html/unnamed-chunk-1-2.png){width=672}\n:::\n\n```{.r .cell-code}\nDBI::dbDisconnect(con)\n```\n:::\n",
    "supporting": [
      "20230519-vjs-rates_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}