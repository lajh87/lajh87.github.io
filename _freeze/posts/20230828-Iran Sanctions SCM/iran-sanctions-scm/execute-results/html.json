{
  "hash": "49b266156a16d8d4c941a16e9b8a9a49",
  "result": {
    "markdown": "---\ntitle: \"Iran Sanctions - Sythetic Control\"\ndescription: \"An applied example of synthetic control\"\nauthor: \"Luke Heley\"\ndate: \"29 Aug 2023\"\nfreeze: true\nexecute:\n  eval: true\nformat:\n  html:\n    toc: true\n    code-fold: true\ncategories:\n - evaluation\n - synthetic-control\n - methods\n - notes\neditor_options:\n  chunk_output_type: console\nbibliography: references.bib\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidysynth)\nlibrary(wbstats)\n```\n:::\n\n\n## Data and Method\n\nData Source: World Bank Development Indicators\n\nTime Period: 2003 - 2015\n\nCountries: Algeria, Angola, Bahrain, Ecuador, Egypt, Iran, Israel, Jordan, Lebanon, Morocco, Nigeria, Oman, and Saudi Arabia.\n\nOutcome Variable: military expenditure (current US\\$) per capita.\n\nControl Variables: total population, imports of goods and services (constant US\\$), GDP per capita (constant US\\$) and real GDP per capita growth rate.\n\nSpecial Variables: military spending per capita in years 2010, 2008, 2006 and 2004\n\n### Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load Data from World Bank\nwb_countries <- wb_countries(\"en\")\ncountries <- c(\n  \"Bahrain\", \"Ecuador\", \"Egypt, Arab Rep.\", \n  \"Iran, Islamic Rep.\", \"Israel\", \"Jordan\", \n  \"Lebanon\", \"Morocco\", \"Nigeria\", \n  \"Oman\",  \"Saudi Arabia\"\n  )\n\ncountry_iso2c <- wb_countries |>\n  dplyr::filter(country %in% countries) |>\n  dplyr::pull(iso2c)\n\nind <- wb_indicators(\"en\", include_archive = FALSE)\nvars <- c(\n  \"MS.MIL.XPND.CD\",\"SP.POP.TOTL\", \n  \"NE.IMP.GNFS.KD\", \"NY.GDP.PCAP.KD\", \n  \"NY.GDP.PCAP.KD.ZG\", \"BM.GSR.GNFS.CD\"\n  )\n\nind |>\n  dplyr::filter(indicator_id %in% vars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 8\n  indicator_id indicator unit  indicator_desc source_org topics source_id source\n  <chr>        <chr>     <lgl> <chr>          <chr>      <list>     <dbl> <chr> \n1 BM.GSR.GNFS… Imports … NA    Imports of go… Internati… <df>           2 World…\n2 MS.MIL.XPND… Military… NA    Military expe… Stockholm… <df>           2 World…\n3 NE.IMP.GNFS… Imports … NA    Imports of go… World Ban… <df>           2 World…\n4 NY.GDP.PCAP… GDP per … NA    GDP per capit… World Ban… <df>           2 World…\n5 NY.GDP.PCAP… GDP per … NA    Annual percen… World Ban… <df>           2 World…\n6 SP.POP.TOTL  Populati… NA    Total populat… (1) Unite… <df>           2 World…\n```\n:::\n\n```{.r .cell-code}\ndf <- wb_data(indicator = vars, country = country_iso2c, start_date = 2002, end_date = 2015)\n\n# Check all variables and countries are in the data frame.\nall(vars %in% names(df)) & all(country_iso2c %in% unique(df$iso2c))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n# Process Data\nsanctions <- df |>\n  dplyr::mutate(\n    milspend_pc =MS.MIL.XPND.CD/SP.POP.TOTL,\n    realgdpgrowth_pc = NY.GDP.PCAP.KD/dplyr::lag(NY.GDP.PCAP.KD,1)-1,\n    country_id = match(iso2c, country_iso2c),\n    imports = ifelse(is.na(NE.IMP.GNFS.KD), BM.GSR.GNFS.CD,NE.IMP.GNFS.KD), ## TODO convert to constant prices.\n    ) |>\n  dplyr::select(\n    country_id, \n    country, \n    year = date, \n    milspend_pc, \n    pop = SP.POP.TOTL, \n    imports,\n    realgdp_pc = NY.GDP.PCAP.KD,\n    realgdpgrowth_pc\n    ) |>\n  dplyr::filter(year>=2003) \n```\n:::\n\n\n\n[sanctions.csv](sanctions.csv)\n\n### Method\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsanctions_out <- sanctions %>%\n  synthetic_control(outcome = milspend_pc, \n                    unit = country, \n                    time = year, \n                    i_unit = \"Iran, Islamic Rep.\", \n                    i_time = 2011, \n                    generate_placebos=T \n                    ) %>%\n  generate_predictor(time_window = 2003:2011,\n                     pop = mean(pop),\n                     imports = mean(imports),\n                     realgdp_pc = mean(realgdp_pc),\n                     realgdpgrowth_pc = mean(realgdpgrowth_pc)) %>%\n  generate_predictor(time_window = 2010,\n                     milspend_2010 = milspend_pc) %>%\n  generate_predictor(time_window = 2008,\n                     milspend_2008 = milspend_pc) %>%\n  generate_predictor(time_window = 2006,\n                     milspend_2006 = milspend_pc) %>%\n  generate_predictor(time_window = 2004,\n                     milspend_2004 = milspend_pc) %>%\n  generate_weights(optimization_window = 2003:2011, \n                   margin_ipop = .02,sigf_ipop = 7,bound_ipop = 6 \n  ) %>%\n  generate_control()\n```\n:::\n\n\n\nOnce the synthetic control is generated, one can easily assess the fit by comparing the trends of the synthetic and observed time series. The idea is that the trends in the pre-intervention period should map closely onto one another.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsanctions_out %>% plot_trends()\n```\n\n::: {.cell-output-display}\n![](iran-sanctions-scm_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nTo capture the causal quantity (i.e. the difference between the observed and counterfactual), one can plot the differences using plot_differences()\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsanctions_out %>% plot_differences()\n```\n\n::: {.cell-output-display}\n![](iran-sanctions-scm_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nIn addition, one can easily examine the weighting of the units and variables in the fit. This allows one to see which cases were used, in part, to generate the synthetic control.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsanctions_out %>% plot_weights()\n```\n\n::: {.cell-output-display}\n![](iran-sanctions-scm_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nAnother useful way of evaluating the synthetic control is to look at how comparable the synthetic control is to the observed covariates of the treated unit.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsanctions_out %>% grab_balance_table()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 4\n  variable         `Iran, Islamic Rep.` synthetic_Iran, Islamic R…¹ donor_sample\n  <chr>                           <dbl>                       <dbl>        <dbl>\n1 imports                      1.66e+11                    5.34e+10     4.94e+10\n2 pop                          7.22e+ 7                    5.50e+ 7     3.25e+ 7\n3 realgdp_pc                   5.03e+ 3                    4.86e+ 3     1.16e+ 4\n4 realgdpgrowth_pc             2.89e- 2                    3.20e- 2     2.48e- 2\n5 milspend_2010                1.80e+ 2                    1.74e+ 2     6.17e+ 2\n6 milspend_2008                1.51e+ 2                    1.49e+ 2     5.94e+ 2\n7 milspend_2006                1.23e+ 2                    1.06e+ 2     4.77e+ 2\n8 milspend_2004                7.59e+ 1                    8.14e+ 1     4.16e+ 2\n# ℹ abbreviated name: ¹​`synthetic_Iran, Islamic Rep.`\n```\n:::\n:::\n\n\n## Inference\n\nFor inference, the method relies on repeating the method for every donor in the donor pool exactly as was done for the treated unit — i.e. generating placebo synthetic controls). By setting generate_placebos = TRUE when initializing the synth pipeline with synthetic_control(), placebo cases are automatically generated when constructing the synthetic control of interest. This makes it easy to explore how unique difference between the observed and synthetic unit is when compared to the placebos.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsanctions_out %>% plot_placebos()\n```\n\n::: {.cell-output-display}\n![](iran-sanctions-scm_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nNote that the plot_placebos() function automatically prunes any placebos that poorly fit the data in the pre-intervention period. The reason for doing so is purely visual: those units tend to throw off the scale when plotting the placebos. To prune, the function looks at the pre-intervention period mean squared prediction error (MSPE) (i.e. a metric that reflects how well the synthetic control maps to the observed outcome time series in pre-intervention period). If a placebo control has a MSPE that is two times beyond the target case (e.g. “California”), then it’s dropped. To turn off this behavior, set prune = FALSE.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsanctions_out %>% plot_placebos(prune = FALSE)\n```\n\n::: {.cell-output-display}\n![](iran-sanctions-scm_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nFinally, Adabie et al. 2010 outline a way of constructing Fisher’s Exact P-values by dividing the post-intervention MSPE by the pre-intervention MSPE and then ranking all the cases by this ratio in descending order. A p-value is then constructed by taking the rank/total.1 The idea is that if the synthetic control fits the observed time series well (low MSPE in the pre-period) and diverges in the post-period (high MSPE in the post-period) then there is a meaningful effect due to the intervention. If the intervention had no effect, then the post-period and pre-period should continue to map onto one another fairly well, yielding a ratio close to 1. If the placebo units fit the data similarly, then we can’t reject the hull hypothesis that there is no effect brought about by the intervention.\n\nThis ratio can be easily plotted using plot_mspe_ratio(), offering insight into the rarity of the case where the intervention actually occurred.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsanctions_out %>% plot_mspe_ratio()\n```\n\n::: {.cell-output-display}\n![](iran-sanctions-scm_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nFor more specific information, there is a significance table that can be extracted with one of the many grab_ prefix functions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsanctions_out %>% grab_significance()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 11 × 8\n   unit_name      type  pre_mspe post_mspe mspe_ratio  rank fishers_exact_pvalue\n   <chr>          <chr>    <dbl>     <dbl>      <dbl> <int>                <dbl>\n 1 Iran, Islamic… Trea…    115.      8667.      75.6      1               0.0909\n 2 Jordan         Donor    284.     13107.      46.1      2               0.182 \n 3 Saudi Arabia   Donor  16332.    706684.      43.3      3               0.273 \n 4 Oman           Donor  13643.    540223.      39.6      4               0.364 \n 5 Lebanon        Donor    218.      5839.      26.8      5               0.455 \n 6 Ecuador        Donor    118.      2857.      24.3      6               0.545 \n 7 Morocco        Donor     21.7      210.       9.69     7               0.636 \n 8 Bahrain        Donor  10509.     77008.       7.33     8               0.727 \n 9 Egypt, Arab R… Donor     57.6      365.       6.34     9               0.818 \n10 Israel         Donor 107344.    156612.       1.46    10               0.909 \n11 Nigeria        Donor   1072.      1503.       1.40    11               1     \n# ℹ 1 more variable: z_score <dbl>\n```\n:::\n:::\n",
    "supporting": [
      "iran-sanctions-scm_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}